<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <!--
       Making sure configuration section for Phosphorus Five is recognized as such
      -->
  <configSections>
    <section name="phosphorus" type="p5.webapp.code.configuration.PhosphorusConfiguration" />
  </configSections>
  <!--
      assemblyDirectory =       Folder on disc where we can find Assemlbies to register as Active Event handlers.

      defaultContextUsername =  Context user which to invoke Active Events on behalf, unless another user 
                                is explicitly logged in

      defaultContextRole =      Role which will be associated with defaultContextUsername user, unless another 
                                user, with another role, is explicitly logged in

      authFile =                Path to file on disc that will be used for usernames/passwords and roles
      -->
  <phosphorus assemblyDirectory="bin/" defaultContextUsername="guest" defaultContextRole="guest" authFile="/auth.hl">
    <!--
        Assemblies that will be loaded and registered as Active Event handlers

        If you create your own "plugin", you should add it to this list.

        Also, there are probably some of these plugins which you can safely remove, depending
        upon which features of P5 you are using.
        -->
    <assemblies>
      <!-- Core assemblies -->
      <add assembly="p5.config" />
      <add assembly="p5.data" />
      <add assembly="p5.events" />
      <add assembly="p5.hyperlambda" />
      <add assembly="p5.io" />
      <add assembly="p5.lambda" />
      <add assembly="p5.math" />
      <add assembly="p5.strings" />
      <add assembly="p5.types" />
      <add assembly="p5.web" />
      <!-- Extras assemblies -->
      <add assembly="p5.crypto" />
      <add assembly="p5.crypto.gnupg" />
      <add assembly="p5.csv" />
      <add assembly="p5.html" />
      <add assembly="p5.imaging" />
      <add assembly="p5.io.authorization" />
      <add assembly="p5.http" />
      <add assembly="p5.auth" />
      <add assembly="p5.mysql" />
      <add assembly="p5.mime" />
      <add assembly="p5.mail" />
      <add assembly="p5.xml" />
      <add assembly="p5.threading" />
      <add assembly="p5.io.zip" />
      <add assembly="p5.markdown" />
      <add assembly="p5.json" />
    </assemblies>
  </phosphorus>
  <!--
      Global application settings.
      Notice, config settings starting with a ".", are in general terms not accessible from p5.lambda directly. Which means they
      can only be retrieved from C# active events, and only if the invoker invokes the [.p5.config.get] with a period
      in front of its name!

      The above feature, allows you to create configuration settings, which cannot be read from Hyperlambda.
      -->
  <appSettings>
    <!--
        The next setting, defines how many maximum ViewState values will be stored in session for each session object.
        If your users are notified often that there was too many viewstate values for the current session, and 
        that their current ViewState key was invalidated, you might consider increasing this value. If you 
        increase it though, the amount of memory used for each session object in your application, will increase, 
        and hence the memory usage of your application will increase. A good number is probably between 5 and 10.

        If you set it to 0, then no ViewState will be stored in the session. This is a major security risk, due to
        the internals of Phosphorus Five, and how it stores p5 lambda objects for Web Widgets in the ViewState.
        If you set it to -1, then the number of ViewState objects per session becomes infinite, which is also a major
        security risk, since then any session can easily use up all memory of your server, simply by pressing reloading
        the page, thousands of times, exhausting your server's memory.
        -->
    <add key=".p5.webapp.viewstate-per-session-entries" value="5" />
    <!--
        The next settings allows you to declare a logo which is used, linking to some URL.
        If you want to use this feature, simply uncomment the next two lines of code, and edit the URL(s).
        Notice, you can provide an absolute URL or a relative URL.
        The image will be rendered with a maximum width of 25%/200px.
    <add key="p5.desktop.logo" value="/modules/desktop/media/logo.svg" />
    <add key="p5.desktop.logo.url" value="https://gaiasoul.com" />
        -->
    <!--
        **** For distributors ****
        Exchange the following "value" with your distributor key.
        -->
    <add key="p5.desktop.distributor-key" value="P5 developer single machine license" />
    <!--
        The next setting tells Phosphorus Five which Hyperlambda file to execute during startup of your application.
        Normally this file should at the very least create one Active Event, needed as a hook, name [p5.web.load-ui].

        This Active Event is raised by Phosphorus Five during the beginning of a HTTP request, and is expected to load
        the User Interface, or do other things, dependent upon what you want it to do.

        The event will be given a [url] argument, which for the root URL will be "/".

        If you want to only use Phosphorus Five, as a full stack development framework yourself, feel free to override
        this, and create your own "loader logic".

        The default loader logic, provided out of the box with Phosphorus Five, will load a simple "desktop", which
        is basically a "micro web operating system".

        This desktop, is dependent upon Micro, which P5 will automatically download, after having brought you through
        setting up your server salt, and root password - For then to show all your installed applications, in addition to
        allowing you to automatically download and install, applications from our internal Bazar.
        -->
    <!--
        This sets the default title of your page, which is used if a module does not explicitly override it.
        -->
    <add key="p5.desktop.default-title" value="Phosphorus Five - In the beginning there was Hyperlambda" />
    <add key=".p5.webapp.application-startup-file" value="/startup.hl" />
    <!--
        This is your server's GnuPG password.
        -->
    <add key="gpg-server-keypair-password" value="ThisIsNotAGoodPassword!!" />
    <!--
        The next three settings as for the p5.data project.
        See p5.data documentation to understand how they work.
        -->
    <add key=".p5.data.path" value="/db/" />
    <add key=".p5.data.nodes-per-file" value="32" />
    <add key=".p5.data.files-per-folder" value="256" />
    <!--
        How many seconds must pass between successive login attempts for the same username, before
        we allow another login attempt for the same username.
        This feature significantly reduces the risk of "brute password attacks", but also have some negative side-effects,
        such as allowing an adversary to make it impossible to login to the system without an existing authentication cookie.
        See the documentation for "p5.auth" to understand these implications.
        Hint; You can set this value to "-1" to turn it completely off, or alternatively simply remove it.
        -->
    <add key=".p5.auth.cooldown-period" value="20" />
    <!--
        How many days the credential cookie is valid in system
        -->
    <add key="p5.auth.credential-cookie-valid" value="90" />
    <!--
        Default skin for "guest" accounts visiting website.
        -->
    <add key="p5.desktop.guest-skin" value="nux" />
    <!--
        An optional regular expression, which becomes a password rule for the system, each
        password must obey by, to be accepted by Phosphorus Five.
        Notice, this default rule is pretty complex, and you might want to simplify it.
        There's another example rule below here, which you might rather want to use.
        -->
    <add key="p5.auth.password-rules" value="^.{25,}$" />
    <add key="p5.auth.password-rules-info" value="Your password must be a sentence at least 25 characters long" />
    <!--
        Hint; Here's a more "complex" password rule for you, if you want to use a more traditional password regime.
              Realize though that this has actually less entropy than the above rule.

    <add key="p5.auth.password-rules" value="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&])[A-Za-z\d$@$!%*?âˆ“]{8,}" />
    <add key="p5.auth.password-rules-info" value="Your password rules are as follows - Minimum eight characters long, at least one uppercase letter, at least one lowercase letter, at least one number, and at least one special character ('$@$!%*?&')." />
        -->
    <!--
        How much workload is required for BlowFish to create a slow hash.
        -->
    <add key=".p5.crypto.blow-fish-workload" value="10" />
    <!--
        Which key server to use for retrieving PGP keys.
        -->
    <add key="p5.crypto.key-server" value="hkp://keyserver.ubuntu.com" />
    <!--
        Default app you want to start during page load.

        The default app here is the "desktop" application, which simply shows you all of your installed
        modules, and allows you to start them by clicking their icon.

        Notice, by uncommenting this bugger, and editing it to your own value, you can have any apps you wish automatically launch,
        as the user launches your website's root URL.
        -->
    <add key="p5.core.default-app" value="/modules/desktop/launch.hl" />
    <!--
        PayPal integration for current installation.
        This is the setting you'd need to configure if you'd like to charge for apps, and/or features.
        It's being used in among other places the "Peeples" modules, to charge for additional users,
        in addition to the "Bazar" when an app costs money to install.

        The "sandbox" bugger is your PayPal key for PayPal's "sandbox" environment, which allows you to test your 
        PayPal integration, with a developer account over at PayPal.

        The "production" guy, is the real/live environment and PayPal developer key, that allows you to actually charge
        your users, and is the one that should be used when distributing your system.

        The "type" guy, should be either "production" or "sandbox", and is the currently used key.
        As you distribute your P5 distribution, obviously "paypal.type" should have the value of "production".
        -->
    <add key="paypal.sandbox" value="ASS9zCiAjKx2cW_Gy234SW5qfX2mWlRoQZDelsokl2Dk2RFX9WeJ3yF5bPu9v_Ajcqayy6zdvLFu-0g0" />
    <add key="paypal.production" value="AYXmWWv-OKV_RFjcksDoK4nJ0djwlhCmXp0h9staoD4U9dsY0oKfw8PBPH9TJ68s0SHjqGzWJNOT0inv" />
    <add key="paypal.type" value="production" />
    <!--
        Here you can set a database prefix, which will become a schema prefix when connecting to your databases.

        Notice, this is a useful feature for multiple installations consuming the same MySQL database, on
        the same physicaly MySQL instance (for instance) - Since it allows you to "namespace" all databases create by P5,
        such that no name clashes occurs for different P5 websites, running towards the same physical MySQL instance.
        -->
    <add key="p5.data.prefix" value="" />
  </appSettings>
  <connectionStrings>
    <!--
        The generic MySQL connection string for your installation.
        If you host your database at some other location, or with a password, feel free to edit this setting as you feel for.
        -->
    <add name="MYSQL_GENERIC_CONNECTION_STRING" connectionString="server=127.0.0.1;SslMode=none;User Id=root;Password=ThisIsNotANicePassword;charset=utf8mb4;allowPublicKeyRetrieval=true;" providerName="MySql.Data.MySqlClient" />
  </connectionStrings>
  <system.web>
    <!--
        Making sure we're using static IDs for controls, and making sure 'p5' is prefix for p5.ajax controls.
        -->
    <pages clientIDMode="Static">
      <controls>
        <add assembly="p5.ajax" namespace="p5.ajax.widgets" tagPrefix="p5" />
      </controls>
    </pages>
    <!--
        Hint!
        Authorization and Authentication is anyways done internally 
        within Phosphorus Five's "p5.auth" plugin.
        -->
    <authentication mode="None" />
    <authorization>
      <allow users="*" />
    </authorization>
    <!--
        Making sure all Hyperlambda files are NOT SERVED by default!
        Notice, in a real production environment, you might want to make sure the web server is setup to deny serving these files,
        as an additional security measure. Such as for Apache, etc, which won't re-direct requests to ASP.NET by default for "x.hl" files anyway.
        However, to make sure the default serving of these pages are denied through ASP.NET, we also deny the serving of them here.
        -->
    <httpHandlers>
      <add verb="*" path="*.hl" type="System.Web.HttpForbiddenHandler" />
    </httpHandlers>
    <!--
        Other system configuration settings
        -->
    <compilation defaultLanguage="C#" debug="true" targetFramework="4.0">
      <assemblies />
    </compilation>
    <!--
        You might want to further secure your cookies, by making sure they're only served over an SSL connection.
        If so, remove the line below, and uncomment the following line.
        The reason why we haven't turned this on by default, is because it would make it impossible to install P5
        locally, on for instance a developer machine, etc.
        <httpCookies httpOnlyCookies="true" requireSsl="true" />
        -->
    <httpCookies httpOnlyCookies="true" />
    <customErrors mode="RemoteOnly" />
    <sessionState mode="InProc" cookieless="false" timeout="20" />
    <globalization requestEncoding="utf-8" responseEncoding="utf-8" />
    <!--
        Some parts of P5 requires extremely long operations, such as generating a new RSA/PGP key with strength 4096 and above.

        Hence, to avoid thread abort on such operations, we need to set the timeout to this (ridiculous) large number!
        If you don't use these features, or you are using them in a spawned thread, feel free to reduce the "executionTimeout" number.
		  -->
    <httpRuntime enableVersionHeader="false" requestValidationMode="2.0" executionTimeout="300" maxRequestLength="2000000000" />
  </system.web>
  <system.webServer>
    <validation validateIntegratedModeConfiguration="false" />
    <handlers>
      <!--
          Making sure we deny serving Hyperlambda files by default.

          This "redundant" setting is necessary to support both Mono and XSP4, in addition 
          to IIS and .Net.
          -->
      <add name="HyperlispDeny" verb="*" path="*.hl" type="System.Web.HttpForbiddenHandler" />
    </handlers>
  </system.webServer>
</configuration>